<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>https://Big-Mouth.github.io/posts/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Oct 2020 10:08:32 +0800</lastBuildDate>
    
        <atom:link href="https://Big-Mouth.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Qieqiang</title>
      <link>https://Big-Mouth.github.io/posts/qieqiang/</link>
      <pubDate>Sun, 11 Oct 2020 10:08:32 +0800</pubDate>
      
      <guid>https://Big-Mouth.github.io/posts/qieqiang/</guid>
      <description>&lt;h1 id=&#34;题解&#34;&gt;题解&lt;/h1&gt;
&lt;h2 id=&#34;贴墙&#34;&gt;贴墙&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题的突破口就在于小瓷砖的面积大小，当墙的面积是2的倍数时，则无法将墙壁都贴满，反之一定能够贴满&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果先将墙的面积算出来的话就需要用到long long的数据类型来储存给的值&lt;/li&gt;
&lt;li&gt;用int应该也是可以的，就这题而言，相乘溢出是不会改变结果的奇偶性的&lt;/li&gt;
&lt;li&gt;代码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
  
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; h, w;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; w;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (h &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;// 如果是2的倍数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {              &lt;span style=&#34;color:#75715e&#34;&gt;//如果不是2的倍数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;还有一种更好的办法，不难发现两个正整数相乘结果是奇数的充分必要条件是两个正整数都是奇数，固只需要判断两个数是否同时为奇数（即只要有一个偶数就输出Yes）便可（这是本题真正想考的思路）&lt;/li&gt;
&lt;li&gt;代码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h, w;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; w;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (h &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&lt;span style=&#34;color:#75715e&#34;&gt;//如果其中有一个是偶数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;雕像&#34;&gt;雕像&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一道简单的模拟题，需要注意的一个坑就是如果是闰年的2月29日制作的雕像的话，纪念日就要等到闰年才能庆祝一次&lt;/li&gt;
&lt;li&gt;代码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y1, m1, d1, x, y2, m2, d2;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; y1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; d1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; y2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; d2;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; d1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;) {&lt;span style=&#34;color:#75715e&#34;&gt;//如果是闰年的2月29号
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; y2; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&lt;span style=&#34;color:#75715e&#34;&gt;//从第二年开始算,算到今年
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) {&lt;span style=&#34;color:#75715e&#34;&gt;//如果是闰年
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                ans&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&lt;span style=&#34;color:#75715e&#34;&gt;//答案加一
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (y2 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (y2 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y2 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) {&lt;span style=&#34;color:#75715e&#34;&gt;//如果今年是闰年
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {&lt;span style=&#34;color:#75715e&#34;&gt;//今年的纪念日还没到
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                ans&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;&lt;span style=&#34;color:#75715e&#34;&gt;//答案减一
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; d2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;) {&lt;span style=&#34;color:#75715e&#34;&gt;//今年的纪念日还没到
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                ans&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
            }
        }
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&lt;span style=&#34;color:#75715e&#34;&gt;//如果不是，则每年都会有一次纪念日
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y1;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m1) {&lt;span style=&#34;color:#75715e&#34;&gt;//如果今年的纪念日还没到
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ans&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; m1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; d2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; d1) {&lt;span style=&#34;color:#75715e&#34;&gt;//如果今年的纪念日还没到
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ans&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
        }
    }
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Jjjj</title>
      <link>https://Big-Mouth.github.io/posts/jjjj/</link>
      <pubDate>Sun, 04 Oct 2020 11:52:17 +0800</pubDate>
      
      <guid>https://Big-Mouth.github.io/posts/jjjj/</guid>
      <description>&lt;h2 id=&#34;代码宏定义&#34;&gt;代码宏定义&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ios std::ios::sync_with_stdio(false)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define sd(n) scanf(&amp;#34;%d&amp;#34;,&amp;amp;n)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define sdd(n,m) scanf(&amp;#34;%d%d&amp;#34;,&amp;amp;n,&amp;amp;m)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define sddd(n,m,k) scanf(&amp;#34;%d%d%d&amp;#34;,&amp;amp;n,&amp;amp;m,&amp;amp;k)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define pd(n) printf(&amp;#34;%d\n&amp;#34;, (n))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define pdd(n,m) printf(&amp;#34;%d %d\n&amp;#34;, n, m)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define pld(n) printf(&amp;#34;%lld\n&amp;#34;, n)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define pldd(n,m) printf(&amp;#34;%lld %lld\n&amp;#34;, n, m)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define sld(n) scanf(&amp;#34;%lld&amp;#34;,&amp;amp;n)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define sldd(n,m) scanf(&amp;#34;%lld%lld&amp;#34;,&amp;amp;n,&amp;amp;m)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define slddd(n,m,k) scanf(&amp;#34;%lld%lld%lld&amp;#34;,&amp;amp;n,&amp;amp;m,&amp;amp;k)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define sf(n) scanf(&amp;#34;%lf&amp;#34;,&amp;amp;n)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define sff(n,m) scanf(&amp;#34;%lf%lf&amp;#34;,&amp;amp;n,&amp;amp;m)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define sfff(n,m,k) scanf(&amp;#34;%lf%lf%lf&amp;#34;,&amp;amp;n,&amp;amp;m,&amp;amp;k)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define rep(i,a,n) for (int i=a;i&amp;lt;=n;i++)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define per(i,n,a) for (int i=n;i&amp;gt;=a;i--)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define mm(a,n) memset(a, n, sizeof(a))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define pb push_back
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define all(x) (x).begin(),(x).end()
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define fi first
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define se second
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define il inline
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define ll long long
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define lson rt &amp;lt;&amp;lt; 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define rson rt &amp;lt;&amp;lt; 1 | 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MOD 1000000007
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define pi 3.14159265358979323
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define debug(x)               cout &amp;lt;&amp;lt;#x&amp;lt;&amp;lt;&amp;#34;: &amp;#34;&amp;lt;&amp;lt;x&amp;lt;&amp;lt;endl
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define debug2(x, y)          cout &amp;lt;&amp;lt;#x&amp;lt;&amp;lt;&amp;#34;: &amp;#34;&amp;lt;&amp;lt;x&amp;lt;&amp;lt;&amp;#34; | &amp;#34;&amp;lt;&amp;lt;#y&amp;lt;&amp;lt;&amp;#34;: &amp;#34;&amp;lt;&amp;lt;y&amp;lt;&amp;lt;endl;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define debug3(x, y, z)       cout &amp;lt;&amp;lt;#x&amp;lt;&amp;lt;&amp;#34;: &amp;#34;&amp;lt;&amp;lt;x&amp;lt;&amp;lt;&amp;#34; | &amp;#34;&amp;lt;&amp;lt;#y&amp;lt;&amp;lt;&amp;#34;: &amp;#34;&amp;lt;&amp;lt;y&amp;lt;&amp;lt;&amp;#34; | &amp;#34;&amp;lt;&amp;lt;#z&amp;lt;&amp;lt;&amp;#34;: &amp;#34;&amp;lt;&amp;lt;z&amp;lt;&amp;lt;endl;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define debug4(a, b, c, d)    cout &amp;lt;&amp;lt;#a&amp;lt;&amp;lt;&amp;#34;: &amp;#34;&amp;lt;&amp;lt;a&amp;lt;&amp;lt;&amp;#34; | &amp;#34;&amp;lt;&amp;lt;#b&amp;lt;&amp;lt;&amp;#34;: &amp;#34;&amp;lt;&amp;lt;b&amp;lt;&amp;lt;&amp;#34; | &amp;#34;&amp;lt;&amp;lt;#c&amp;lt;&amp;lt;&amp;#34;: &amp;#34;&amp;lt;&amp;lt;c&amp;lt;&amp;lt;&amp;#34; | &amp;#34;&amp;lt;&amp;lt;#d&amp;lt;&amp;lt;&amp;#34;: &amp;#34;&amp;lt;&amp;lt;d&amp;lt;&amp;lt;endl;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ll &lt;span style=&#34;color:#a6e22e&#34;&gt;INF&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x3f3f3f3f3f3f3f3fll&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inf&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x3f3f3f3f&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; read(T &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;res){&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; flag&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; ch;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;isdigit(ch&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;getchar()))(ch&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;(flag&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true);
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(res&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ch&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;;isdigit(ch&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;getchar());res&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(res&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(res&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;ch &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;);flag&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;(res&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;res);}
&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Out(T x){&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)putchar(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;),x&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;x;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)Out(x&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);putchar(x&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;);}
ll &lt;span style=&#34;color:#a6e22e&#34;&gt;gcd&lt;/span&gt;(ll a,ll b){&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;gcd(b,a&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;b)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;a;}
ll &lt;span style=&#34;color:#a6e22e&#34;&gt;lcm&lt;/span&gt;(ll a,ll b){&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;gcd(a,b);}
ll &lt;span style=&#34;color:#a6e22e&#34;&gt;pow_mod&lt;/span&gt;(ll x,ll n,ll mod){ll res&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(n){&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)res&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;res&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;mod;x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;mod;n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;}&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;}
ll &lt;span style=&#34;color:#a6e22e&#34;&gt;fact_pow&lt;/span&gt;(ll n,ll p){ll res&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(n){n&lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt;p;res&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;n;}&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;}
ll &lt;span style=&#34;color:#a6e22e&#34;&gt;mult&lt;/span&gt;(ll a,ll b,ll p){a&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;p;b&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;p;ll r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,v&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(b){&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(b&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){r&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;v;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(r&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;p)r&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;p;}v&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(v&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;p)v&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;p;b&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;}&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;}
ll &lt;span style=&#34;color:#a6e22e&#34;&gt;quick_pow&lt;/span&gt;(ll a,ll b,ll p){ll r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,v&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;p;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(b){&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(b&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mult(r,v,p);v&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mult(v,v,p);b&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;}&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r;}
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CH&lt;/span&gt;(ll a,ll n,ll x,ll t)
{ll r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;quick_pow(a,x,n);ll z&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;r;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(ll i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;t;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mult(r,r,n);&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(r&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;z&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;z&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;z&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;r;}&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;}
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Miller_Rabin&lt;/span&gt;(ll n)
{&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(n&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;ll x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,t&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)){x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;t&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;}srand(time(NULL));
ll o&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(ll i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;o;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){ll a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rand()&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(CH(a,n,x,t))&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;}&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;}
&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;int prime[30000010],minprime[30000010];
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;void euler(int n)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{int c=0,i,j;for(i=2;i&amp;lt;=n;i++){if(!minprime[i])prime[++c]=i,minprime[i]=i;for(j=1;j&amp;lt;=c&amp;amp;&amp;amp;i*prime[j]&amp;lt;=n;j++)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{minprime[i*prime[j]]=prime[j];if(i%prime[j]==0)break;}}}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;struct Tree{ll l,r,sum,lazy,maxn,minn;}tree[1000000];
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;il void push_up(ll rt)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{tree[rt].sum=tree[rt&amp;lt;&amp;lt;1].sum+tree[rt&amp;lt;&amp;lt;1|1].sum;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;tree[rt].maxn=max(tree[rt&amp;lt;&amp;lt;1].maxn,tree[rt&amp;lt;&amp;lt;1|1].maxn);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;tree[rt].minn=min(tree[rt&amp;lt;&amp;lt;1].minn,tree[rt&amp;lt;&amp;lt;1|1].minn);}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;il void push_down(ll rt , ll now)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{if(tree[rt].lazy){tree[rt&amp;lt;&amp;lt;1].lazy+=tree[rt].lazy;tree[rt&amp;lt;&amp;lt;1|1].lazy+=tree[rt].lazy;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;tree[rt&amp;lt;&amp;lt;1].sum+=(now-(now&amp;gt;&amp;gt;1))*tree[rt].lazy;tree[rt&amp;lt;&amp;lt;1|1].sum+=(now&amp;gt;&amp;gt;1)*tree[rt].lazy;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;tree[rt&amp;lt;&amp;lt;1].minn+=tree[rt].lazy;tree[rt&amp;lt;&amp;lt;1|1].minn+=tree[rt].lazy;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;tree[rt&amp;lt;&amp;lt;1].maxn+=tree[rt].lazy;tree[rt&amp;lt;&amp;lt;1|1].maxn+=tree[rt].lazy;tree[rt].lazy=0;}}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;il void build(ll l , ll r , ll rt , ll *aa)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{tree[rt].lazy=0;tree[rt].l=l;tree[rt].r=r;if(l==r)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{tree[rt].sum=aa[l];tree[rt].minn=tree[rt].sum;tree[rt].maxn=tree[rt].sum;return;}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;ll mid=(l+r)&amp;gt;&amp;gt;1;build(l,mid,rt&amp;lt;&amp;lt;1,aa);build(mid+1,r,rt&amp;lt;&amp;lt;1|1,aa);push_up(rt);}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;il void update_range(ll L , ll R , ll key , ll rt)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{if(L&amp;lt;=tree[rt].l&amp;amp;&amp;amp;R&amp;gt;=tree[rt].r){tree[rt].sum+=(tree[rt].r-tree[rt].l+1)*key;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;tree[rt].minn+=key;tree[rt].maxn+=key;tree[rt].lazy+=key;return;}push_down(rt,tree[rt].r-tree[rt].l+1);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;ll mid=(tree[rt].r+tree[rt].l)&amp;gt;&amp;gt;1;if(L&amp;lt;=mid)update_range(L,R,key,lson);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;if(R&amp;gt;mid)update_range(L,R,key,rson);push_up(rt);}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;il ll query_range(ll L, ll R, ll rt)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{if(L&amp;lt;=tree[rt].l&amp;amp;&amp;amp;R&amp;gt;=tree[rt].r){return tree[rt].sum;}push_down(rt,tree[rt].r-tree[rt].l+1);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;ll mid=(tree[rt].r+tree[rt].l)&amp;gt;&amp;gt;1;ll ans=0;if(L&amp;lt;=mid)ans+=query_range(L,R,lson);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;if(R&amp;gt;mid)ans+=query_range(L,R,rson);return ans;}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;il ll query_min(ll L,ll R,ll rt)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{if(L&amp;lt;=tree[rt].l&amp;amp;&amp;amp;R&amp;gt;=tree[rt].r){return tree[rt].minn;}push_down(rt,tree[rt].r-tree[rt].l+1);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;ll mid=(tree[rt].r+tree[rt].l)&amp;gt;&amp;gt;1;ll ans=(0x3f3f3f3f3f3f3f3fll);if(L&amp;lt;=mid)ans=min(ans,query_min(L,R,lson));
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;if(R&amp;gt;mid)ans=min(ans,query_min(L,R,rson));return ans;}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;il ll query_max(ll L, ll R, ll rt)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{if(L&amp;lt;=tree[rt].l&amp;amp;&amp;amp;R&amp;gt;=tree[rt].r){return tree[rt].maxn;}push_down(rt,tree[rt].r-tree[rt].l+1);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;ll mid=(tree[rt].r+tree[rt].l)&amp;gt;&amp;gt;1;ll ans=-(0x3f3f3f3f3f3f3f3fll);if(L&amp;lt;=mid)ans=max(ans,query_max(L,R,lson));
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;if(R&amp;gt;mid)ans=max(ans,query_max(L,R,rson));return ans;}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1e3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
ll a[N][N];
map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; , &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;ha;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://Big-Mouth.github.io/posts/leetcode_5515/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Big-Mouth.github.io/posts/leetcode_5515/</guid>
      <description>&lt;p&gt;请你给一个停车场设计一个停车系统。停车场总共有三种不同大小的车位：大，中和小，每种尺寸分别有固定数目的车位。&lt;/p&gt;
&lt;p&gt;请你实现 &lt;code&gt;ParkingSystem&lt;/code&gt; 类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ParkingSystem(int big, int medium, int small) 初始化 ParkingSystem 类，三个参数分别对应每种停车位的数目。&lt;/li&gt;
&lt;li&gt;bool addCar(int carType) 检车是否有 carType 对应的停车位。 carType 有三种类型：大，中，小，分别用数字 1， 2 和 3 表示。一辆车只能停在  carType 对应尺寸的停车位中。如果没有空车位，请返回 false ，否则将该车停入车位并返回 true 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/design-parking-system&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;输入：
[&amp;#34;ParkingSystem&amp;#34;, &amp;#34;addCar&amp;#34;, &amp;#34;addCar&amp;#34;, &amp;#34;addCar&amp;#34;, &amp;#34;addCar&amp;#34;]
[[1, 1, 0], [1], [2], [3], [1]]
输出：
[null, true, true, false, false]

解释：
ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);
parkingSystem.addCar(1); // 返回 true ，因为有 1 个空的大车位
parkingSystem.addCar(2); // 返回 true ，因为有 1 个空的中车位
parkingSystem.addCar(3); // 返回 false ，因为没有空的小车位
parkingSystem.addCar(1); // 返回 false ，因为没有空的大车位，唯一一个大车位已经被占据了

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/design-parking-system
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ParkingSystem&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, big: int, medium: int, small: int):  
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;big &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; big
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;medium &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; medium
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;small &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; small
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addCar&lt;/span&gt;(self, carType: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; carType &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;big &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;big &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; carType &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;medium &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;medium &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; carType &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;small &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;small &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://Big-Mouth.github.io/posts/markdown_start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Big-Mouth.github.io/posts/markdown_start/</guid>
      <description>&lt;h2 id=&#34;markdown的简介&#34;&gt;markdown的简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;markdown是一种轻量级的标记语言 理念Mark&lt;/p&gt;
&lt;p&gt;超级文本标签&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;标题&#34;&gt;标题&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;www.baidu.com&#34;&gt;百度一下&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ctrl+数字+1-5可以快速选中文字变成对应的标题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ctrl+加号对标题进行加&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;段落&#34;&gt;段落&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：直接进行文字编辑 如需直接换行或在段落中回车&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.字体&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;p&gt;1.粗体： &lt;strong&gt;这是粗体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2.删除线：用一对双票号进行包裹&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;

这是一对删除线 ~~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;这是一对删除线&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; 这是一条下划线&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;加粗 ctrl + B&lt;/p&gt;
&lt;p&gt;斜体 ctrl + I&lt;/p&gt;
&lt;p&gt;下划线 ctrl+ u&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;这是加粗ctrl+B&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这是斜体 ctrl+I&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;这是下划线 ctrl+u&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;下面给大家讲一下分隔符&lt;/p&gt;
&lt;p&gt;分割线&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;p&gt;分割线： 三个减号回车&lt;/p&gt;
&lt;hr&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;--- + enter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;3.脚注的注释&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[^键入文本]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;这是一个技术&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;四列表&#34;&gt;四、列表&lt;/h2&gt;
&lt;p&gt;1、无序列表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;* 空格
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;效果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只有同一级别&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;一级分类
&lt;ul&gt;
&lt;li&gt;苹果&lt;/li&gt;
&lt;li&gt;香蕉&lt;/li&gt;
&lt;li&gt;橘子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1.这是第一个
&lt;ul&gt;
&lt;li&gt;这是子内容&lt;/li&gt;
&lt;li&gt;这是子内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2.这是第二个&lt;/li&gt;
&lt;li&gt;第三个标题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我是一个大闸蟹&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;spring boot 技术&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;请相信我&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;二级分类&lt;/li&gt;
&lt;li&gt;这是内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;六代码块的显示&#34;&gt;六、代码块的显示&lt;/h2&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text/java/c++/c#/js&#34; data-lang=&#34;text/java/c++/c#/js&#34;&gt;​``` C++

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;效果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;pubic &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;链接&#34;&gt;链接&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;www.buidu.com

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;效果&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;www.baidu.com&#34;&gt;百度一下&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;图片插入&#34;&gt;图片插入&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;![自定义图片名称](图片的路径)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;![这是picture](C:\Users\Administrator\Pictures\Camera Roll\20200910154111.png)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;表格&#34;&gt;表格&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;|表头|表头|表头|
|---|---|---|
|1|2|23|3|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表头&lt;/th&gt;
&lt;th&gt;表头&lt;/th&gt;
&lt;th&gt;表头&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;快捷键：&lt;/p&gt;
&lt;p&gt;ctrl +T（table)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;十其他操作&#34;&gt;十、其他操作&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;``
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ctrl&lt;/code&gt;+&lt;code&gt;shift&lt;/code&gt;+&lt;code&gt;R&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl&lt;/code&gt;+&lt;code&gt;shift&lt;/code&gt;+&lt;code&gt;/&lt;/code&gt;：注释&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;![这是一张萌图](C:\Users\Administrator\Pictures\Camera Roll\timg (2).jpg)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;这是一个非常好用的框架 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;这是啥，你猜呀 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://Big-Mouth.github.io/posts/update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Big-Mouth.github.io/posts/update/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;cd e:\myblog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;hugo new post/FileName.md
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;hugo --theme=hurock --baseUrl=&amp;#34;https://Big-Mouth.github.io&amp;#34; --buildDrafts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;cd public
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;git add .
git commit -m &amp;#34;yyyy/mm/dd-hh:mm&amp;#34;
git push -u origin master	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果上面的最后一步报出如下错误：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;! [rejected] master -&amp;gt; master (fetch first) error: failed to push some refs to 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;出现这个问题的原因是什么呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;github中的README.md文件不在本地代码目录中
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因此，可以通过下面的命令进行代码合并&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pull&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rebase&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;origin&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;master&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二个问题是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;! [remote rejected] master -&amp;gt; master (pre-receive hook declined)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在推送代码时报错如上，网上搜到的方法说是项目的setting中master是受保护的项目，所以开发者无法推送，解决方法是修改protected的设置，或者新建一个分支，推送到自己的分支上。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_43264399/article/details/87350219&#34;&gt;其他问题看这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;em&gt;&lt;strong&gt;yyyy/mm/dd-hh:mm&lt;/strong&gt;&lt;/em&gt; 为每次提交的名称，引号内可以随意更改，yyyy/mm/dd-hh:mm 是我个人采用的格式，以时间做标记可&lt;strong&gt;保证不会重复&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;现在刷新github登陆个人博客查看即可&#34;&gt;&lt;strong&gt;现在刷新GitHub，登陆个人博客查看即可&lt;/strong&gt;&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://Big-Mouth.github.io/posts/%E7%BB%8F%E5%85%B8%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Big-Mouth.github.io/posts/%E7%BB%8F%E5%85%B8%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
      <description>&lt;h1 id=&#34;经典并查集&#34;&gt;经典并查集&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;在算法笔记上有一道这样的题目&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;题目描述&#34;&gt;题目描述&lt;/h3&gt;
&lt;p&gt;有一个叫作“数码世界”的奇异空间，在数码世界里生活着许许多多的数码宝贝，其中有些数码宝贝之间可能是好朋友。并且数码世界有两条不成文的规定：
第一，数码宝贝A和数码宝贝B是好朋友等价于数码宝贝B和数码宝贝A是好朋友。
第二，如果数码宝贝A和数码宝贝C是好朋友，而数码宝贝B和数码宝贝C也是好朋友，那么A和B也是好朋友。&lt;/p&gt;
&lt;p&gt;现在给出这些数码宝贝中所有好朋友的信息，问：可以把这些数码宝贝分成多少组，满足每组中的任意两只数码宝贝都是好朋友，且任意两组之间的数码宝贝都不是好朋友。&lt;/p&gt;
&lt;h3 id=&#34;题目分析&#34;&gt;题目分析&lt;/h3&gt;
&lt;p&gt;首先，可以看到这是一个分组类型的题目，把相互之间有关系的元素放在一起（并），查询小组数（查）以及合并后的集合（集）&lt;/p&gt;
&lt;p&gt;因此，这就是一个并查集的模型。可以把题目中给出的好友的关系视为两结点之间的边，那么在输入这些好友关系时，就可以同时把他们合并（这就要求我们写一个合并函数）这样处理完毕之后就得到了一些集合，而集合的个数呢，就是我们所要求的组数。&lt;/p&gt;
&lt;p&gt;那集合的个数要怎么求呢？我们通过观察可以很容易发现：&lt;strong&gt;对于同一个集合来说，只存在唯一的根节点，且将其作为所属集合的标识&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以呢，我们只要用一个bool数组来存储根结点即可，当然要考虑一些细节，比如说，可以在给结点编号的同时，初始化isroot数组为false，那什么时候让它为true呢？&lt;/p&gt;
&lt;p&gt;当然是要写一个findfather函数，在此函数中，可以做两件事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;寻找根节点&lt;/li&gt;
&lt;li&gt;压缩路径&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然，这个直接套模板即可，毫无技术含量。&lt;/p&gt;
&lt;p&gt;在找到了根节点之后，我们就遍历每一个结点，判断如果它是根节点的话，那么直接让他的bool值为true;&lt;/p&gt;
&lt;p&gt;另外，如果还要求分成的组数（但不要求每个集合的元素）的话，就用一个set存储每个根结点的儿子数（每个集合的元素个数）最后输出即可。代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;set&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; father[N];
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; isroot[N];

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findfather&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x) {&lt;span style=&#34;color:#75715e&#34;&gt;//查找每个节点所在集合的根节点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; father[x]) {
		x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; father[x];
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;//路径压缩
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; father[a]) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a;&lt;span style=&#34;color:#75715e&#34;&gt;//因为a要被father[a]覆盖掉，所以这里先把原来结点存下来，用于修改father[a]的值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; father[a];&lt;span style=&#34;color:#75715e&#34;&gt;//a不断地回溯父亲结点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		father[z] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;&lt;span style=&#34;color:#75715e&#34;&gt;//将原来结点的父亲结点改为根结点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Union&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (findfather(a) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; findfather(b)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
	a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; findfather(a);
	b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; findfather(b);
	father[a] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b;
	
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		father[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
		isroot[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
	}
}

&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;7 5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;1 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;2 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;3 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;1 4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;5 6
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, m, a, b;
	scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;m);
	init(n);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; m; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;b);
		Union(a, b);
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans[N] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		isroot[findfather(i)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (father[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; findfather(i))
			ans[findfather(i)]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
	}
	set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; root;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (isroot[i]) {
			root.insert(i);
		}
	}
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (father[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; findfather(i))
			result.push_back(i);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root.begin(); it &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; root.end(); it&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it, ans[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it]);
	}
		
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是，如果题目要求每个集合的根节点以及对应的子节点的话，就需要用map存储每个跟结点对应的子节点（容易看出，这是&lt;strong&gt;一对多&lt;/strong&gt;，因此，我们用一个vector数组来存所有的子节点）&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; max_union_find_set &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; father[max_union_find_set] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };

&lt;span style=&#34;color:#75715e&#34;&gt;//初始化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init_father&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n) {&lt;span style=&#34;color:#75715e&#34;&gt;//n 表示共有多少个数字
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
	{
		father[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
	}
}

&lt;span style=&#34;color:#75715e&#34;&gt;//查找x所在集合的父结点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_father&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; current_temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;&lt;span style=&#34;color:#75715e&#34;&gt;//current_temp为最初查找结点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; father[x])
	{
		x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; father[x];
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;//当前 x 为根结点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;//路径压缩
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (current_temp &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; father[current_temp])
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current_temp;&lt;span style=&#34;color:#75715e&#34;&gt;//临时保存当前结点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		current_temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; father[temp];&lt;span style=&#34;color:#75715e&#34;&gt;//往上查找
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		father[temp] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;&lt;span style=&#34;color:#75715e&#34;&gt;//进行路径压缩
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x;
}

&lt;span style=&#34;color:#75715e&#34;&gt;//合并两个元素到一个集合
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;union_father&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; father_a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_father(a);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; father_b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_father(b);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (father_a &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; father_b)
	{
		father[father_a] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; father_b;
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {

	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, m;&lt;span style=&#34;color:#75715e&#34;&gt;//n 表示共有多少个数字，m 表示好朋友的组数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m;
	&lt;span style=&#34;color:#75715e&#34;&gt;//初始化 father 数组
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	init_father(n);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b;&lt;span style=&#34;color:#75715e&#34;&gt;// a ，b 分别表示输入的具体数字，即 a 和 b 为好朋友
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
	{
		cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; b;
		union_father(a, b);&lt;span style=&#34;color:#75715e&#34;&gt;//合并两个数字
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
	map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; root_map;&lt;span style=&#34;color:#75715e&#34;&gt;//保存每个根结点及其子结点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result;&lt;span style=&#34;color:#75715e&#34;&gt;// 存放根结点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_father(i);
		result.push_back(root);&lt;span style=&#34;color:#75715e&#34;&gt;//这里注意重复的元素也要加入result中，因为下面要用map一一对应
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
	&lt;span style=&#34;color:#75715e&#34;&gt;//此处vector&amp;lt;int&amp;gt;::iterator建议改用auto
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result.begin();it &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; result.end();it&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)    
	{  &lt;span style=&#34;color:#75715e&#34;&gt;//得出根结点和每个根结点对应的子节点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it);
		vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; child;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (father[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; root)&lt;span style=&#34;color:#75715e&#34;&gt;//一定要注明：这里i不能为自身，因为它指的是子节点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			{
				child.push_back(i);
			}
		}
		root_map.insert(pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(root, child));&lt;span style=&#34;color:#75715e&#34;&gt;//注意map包含里面用的是pair，把这个写法记一下
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}

	cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;组数为：&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; root_map.size() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;,vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root_map.begin();it &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; root_map.end();it&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
	{
		cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;根结点为：&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it).first &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it).second.size() &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#75715e&#34;&gt;//要存在孩子结点才输出
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		{
			cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;其子结点分别为：&amp;#34;&lt;/span&gt;;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;iterator vit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it).second.begin();vit &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;it).second.end();vit&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;//这里要特别注意，这里的vit可千万不能写成it，我就是在这里犯了个低级错误导致浪费了我好多时间去debug。也要注意这里的写法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		{
			cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;vit) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
		}
		cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
	}
	system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果图如下：&lt;/p&gt;
&lt;p&gt;![](C:\Users\Administrator\Pictures\Camera Roll\QQ截图20201005203128.png)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://Big-Mouth.github.io/posts/%E8%B4%B4%E5%A2%99%E4%B8%8E%E9%9B%95%E5%A1%91-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Big-Mouth.github.io/posts/%E8%B4%B4%E5%A2%99%E4%B8%8E%E9%9B%95%E5%A1%91-/</guid>
      <description>&lt;h1 id=&#34;题解&#34;&gt;题解&lt;/h1&gt;
&lt;h2 id=&#34;贴墙&#34;&gt;贴墙&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题的突破口就在于小瓷砖的面积大小，当墙的面积是2的倍数时，则无法将墙壁都贴满，反之一定能够贴满&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果先将墙的面积算出来的话就需要用到long long的数据类型来储存给的值&lt;/li&gt;
&lt;li&gt;用int应该也是可以的，就这题而言，相乘溢出是不会改变结果的奇偶性的&lt;/li&gt;
&lt;li&gt;代码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; h, w;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; w;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (h &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;// 如果是2的倍数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {              &lt;span style=&#34;color:#75715e&#34;&gt;//如果不是2的倍数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;还有一种更好的办法，不难发现两个正整数相乘结果是奇数的充分必要条件是两个正整数都是奇数，固只需要判断两个数是否同时为奇数（即只要有一个偶数就输出Yes）便可（这是本题真正想考的思路）&lt;/li&gt;
&lt;li&gt;代码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h, w;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; w;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (h &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&lt;span style=&#34;color:#75715e&#34;&gt;//如果其中有一个是偶数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;雕像&#34;&gt;雕像&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一道简单的模拟题，需要注意的一个坑就是如果是闰年的2月29日制作的雕像的话，纪念日就要等到闰年才能庆祝一次&lt;/li&gt;
&lt;li&gt;代码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y1, m1, d1, x, y2, m2, d2;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; y1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; d1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; y2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; d2;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; d1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;) {&lt;span style=&#34;color:#75715e&#34;&gt;//如果是闰年的2月29号
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; y2; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&lt;span style=&#34;color:#75715e&#34;&gt;//从第二年开始算,算到今年
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) {&lt;span style=&#34;color:#75715e&#34;&gt;//如果是闰年
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                ans&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&lt;span style=&#34;color:#75715e&#34;&gt;//答案加一
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (y2 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (y2 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y2 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) {&lt;span style=&#34;color:#75715e&#34;&gt;//如果今年是闰年
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {&lt;span style=&#34;color:#75715e&#34;&gt;//今年的纪念日还没到
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                ans&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;&lt;span style=&#34;color:#75715e&#34;&gt;//答案减一
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; d2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;) {&lt;span style=&#34;color:#75715e&#34;&gt;//今年的纪念日还没到
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                ans&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
            }
        }
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&lt;span style=&#34;color:#75715e&#34;&gt;//如果不是，则每年都会有一次纪念日
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y1;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m1) {&lt;span style=&#34;color:#75715e&#34;&gt;//如果今年的纪念日还没到
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ans&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; m1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; d2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; d1) {&lt;span style=&#34;color:#75715e&#34;&gt;//如果今年的纪念日还没到
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            ans&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
        }
    }
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>